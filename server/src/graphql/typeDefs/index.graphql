scalar JSON

type Query {
  available: MapData
  availablePokemon: [String]
  availablePokestops: [String]
  availableGyms: [String]
  availableNests: [String]
  availableStations: [String]
  badges: [Badge]
  backup(id: ID): Backup
  backups: [Backup]
  checkUsername(username: String): Boolean
  fabButtons: FabButtons
  checkValidScan(mode: String, points: [[Float]]): [Boolean]
  customComponent(component: String): JSON
  devices(filters: JSON): [Device]
  geocoder(search: String): [Geocoder]
  gyms(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Gym]
  gymsSingle(id: ID, perm: String): Gym
  locales(locale: String): Locales
  motdCheck(clientIndex: Int): Boolean
  nests(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Nest]
  nestsSingle(id: ID, perm: String): Nest
  pokestops(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Pokestop]
  pokestopsSingle(id: ID, perm: String): Pokestop
  pokemon(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Pokemon]
  pokemonSingle(id: ID, perm: String): Pokemon
  portals(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Portal]
  portalsSingle(id: ID, perm: String): Portal
  stations(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Station]
  stationPokemon(id: ID): [StationPokemon]
  s2cells(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [S2Cell]
  scanCells(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
    zoom: Int
  ): [ScanCell]
  scanAreas: [ScanArea]
  scanAreasMenu: [ScanAreasMenu]
  scannerConfig(mode: String): ScannerConfig
  search(
    search: String
    category: String
    lat: Float
    lon: Float
    locale: String
    onlyAreas: [String]
  ): [Search]
  searchable: [String]
  searchLure(
    search: String
    category: String
    lat: Float
    lon: Float
    locale: String
    onlyAreas: [String]
  ): [SearchLure]
  searchInvasion(
    search: String
    category: String
    lat: Float
    lon: Float
    locale: String
    onlyAreas: [String]
  ): [SearchInvasion]
  searchQuest(
    search: String
    category: String
    lat: Float
    lon: Float
    locale: String
    onlyAreas: [String]
    questLayer: String
  ): [SearchQuest]
  spawnpoints(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Spawnpoint]
  submissionCells(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    zoom: Int
    filters: JSON
  ): [SubmissionCell]
  weather(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Weather]
  route(id: ID): Route
  routes(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Route]
  hyperlocal(
    minLat: Float
    maxLat: Float
    minLon: Float
    maxLon: Float
    filters: JSON
  ): [Hyperlocal]
  webhook(category: String, status: String): Poracle
  webhookAreas: [WebhookAreaGroups]
  webhookGeojson: JSON
  webhookContext: PoracleConfig
  webhookCategories: [String]
  webhookUser: UserPoracleConfig
  scanner(category: String, method: String, data: JSON): ScannerApi
  validateUser: ValidUserObj
}

type Mutation {
  createBackup(backup: BackupCreate): Boolean
  updateBackup(backup: BackupUpdate): Boolean
  deleteBackup(id: ID): Boolean
  webhook(category: String, data: JSON, status: String): Poracle
  webhookChange(webhook: String): Poracle
  tutorial(tutorial: Boolean): Boolean
  strategy(strategy: String): Boolean
  setGymBadge(gymId: String, badge: Int): Boolean
  setExtraFields(key: String, value: String): Boolean
  nestSubmission(id: ID, name: String): Boolean
  saveComponent(component: String, code: String): String
}
